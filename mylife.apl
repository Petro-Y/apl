⍝ TODO: кешування (інтегрувати в rep або play)....
hash←{256|⌈{⍵+○⍺}/,⍵}
cache←256 2⍴0
cacheindex←256⍴⊂⍬ ⍝ хеш-таблиця, що містить списки захешованих ⍺ для кожної ⍵ ....
cached←{i←hash ⍺,⍵⋄ cache[i;0]≡⍺ ⍵:cache[i;1]⋄ res←⍺ ⍺⍺ ⍵⋄ cache[i;0]←⍺ ⍵⋄ cache[i;1]←res⋄ res}

⍝⍝ ⍟⍟⍟⍟⍟⍟⍟⍟⍟⍟⍟ CONWAY'S GAME OF LIFE ⍟⍟⍟⍟⍟⍟⍟⍟⍟⍟⍟⍟⍟⍟ ⍝⍝
_life←{((⍵×9)+⊃+/+/¯1 0 1∘.⊖¯1 0 1∘.⌽⊂⍵)∊⍺}
life←{12 13 3 _life ⍵}
mylife←{((⍵×9)+⊃+/+/¯1 0 1∘.⊖¯1 0 1∘.⌽⊂⍵)∊12 13 3}

⍝ Dyalog APL:
⎕io←0
⎕ml←3

⍝ NGN APL (and Dyalog):
zborder← ({⍉⊖{⌈/0⌷⍵:(-1 0+⍴⍵)↑⍵⋄⍵}{⌈/0⌷⍵:⍵⋄1↓⍵}⍵}⍣4){(3 3⌈(⍴⍵))↑⍵}
⍝                      запобігти помилці порожнього поля⍝   
inf←{ ⍺⍺  zborder ⍵} 
⍝ TODO: infagar (нескінченний зовнішній простір заповнено однаковими патернами), 
	⍝ виокремити блок агару (лів.верх.) заданого розміру
	⍝ обгорнути поле агаром по периметру
	⍝ зробити хід на замкнутому полі
	⍝ виокремити блок агару, вважати його непошкодженим
	⍝ знайти маску пошкоджень (порівнявши реальну карту та агар)
	⍝ знайти кількість непошкоджених рядів/стовпців з кожного боку
	⍝ позрізати блоки непошкодженого агару з усіх боків (лишивши при цьому один шар непошкодженого агару)....
{+/¨~∨\¨(⌽¨,⊢){(∨⌿⍵)(∨/⍵)}mask←⍺{⍵≠(⍴⍵)agar⍺↑⍵}map1← ⍺⍺ (-⍺[0])⊖(-⍺[1])⌽⍵join(((⍺×⌈⍺÷⍨⍴⍵)+2×⍺)agar ⍺↑⍵) without 1⍴⍨⍴⍵}
	
⍝       inffuse (нескінченне продовження — діаг/гориз/верт)...
	⍝ виокремити правий і нижній краї заданого розміру y x
	⍝ додати двічі повтор виокремлених країв зі зміщенням
	⍝ обгорнути нулями
	⍝ зробити хід на замкнутому полі
	⍝ обрізати лівий верх, як у zborder; 
	⍝ зрізати (y x+1 1) внизу праворуч (вважаємо їх пошкодженими)
	⍝ якщо пр. нижній край та край перед ним збігаються, зрізаємо y x
	⍝ або позрізати всі блоки непошкодженого ґноту з пр. ниж. боку (лишивши при цьому один непошкоджений)
	

__play←{map←⍵ ⋄  ⍺⍺ {⊂'.≢'[( ⍺⍺ ⍣⍵) map]}¨⍺}
_play←{map←⍵ ⋄  ⍺⍺ {⊂'.≢'[zborder ( ⍺⍺ ⍣⍵) map]}¨⍺}
inflife←mylife zborder
_inflife←{⍺ _life zborder ⍵}
play←{map←⍵ ⋄ {⊂'.≢'[zborder (inflife⍣⍵) map]}¨⍺}

⍝ NARS2000:
⎕io←0
rep←{⍺>0:⍺⍺((⍺-1)⍺⍺ ∇∇ ⍵)⋄ ⍵} ⍝ замінник відсутнього в цій реалізації оператора ⍣
⍝ N f rep A ←→ (f⍣N)A
zborder←{4 {⍉⊖{(- (↑⌈/⍵) 0+⍴⍵)↑⍵}{(~↑⌈/⍵) 0↓⍵}⍵} rep (3 3⌈(⍴⍵))↑⍵}
inflife←{mylife zborder ⍵}
play←{map←⍵ ⋄ {⊂'∘≢'[zborder ⍵ inflife rep map]}¨⍺}

⍝ GNU APL:
⎕io←0
zborder←{({⍉⊖{(- (↑⌈/⍵) 0+⍴⍵)↑⍵}{(~↑⌈/⍵) 0↓⍵}⍵}⍣4) ⍵}
inflife←{mylife zborder ⍵}
play←{(⊂⍵)∘.{⊂'.≢'[zborder (inflife⍣⍵) ⊃⍺]}⍺}
⍝ ⍺⍺ — несумісно з GNU APL, ⍶ — несумісно з NARS2000 та Dyalog. Що робити?

⍝ нижче — код для NGN APL (має також працювати в Dyalog)
⍝ перетворення з форматів:
bitmap←{⍺⍴⍉(16⍴2)⊤⍵}
⍝ http://conwaylife.com/wiki/RLE .....

⍝ конструктори фігур:
over←{max←(⍴⍺)⌈⍴⍵⋄(max↑⍺) ⍺⍺ max↑⍵}
join←∨over
without←∧∘~over
shift←{(- ⍺+⍴⍵)↑⍵}
grow←{(⍺+⍴⍵)↑⍵}

symmv←⊢⍪⊖
symmh←⊢,⌽
symm4←symmv symmh
oddv←{(y x)←(⍴⍵)÷¯2 ⋄ y⊖1 0↓y⊖⍵}
oddh←{(y x)←(⍴⍵)÷¯2 ⋄ x⌽0 1↓x⌽⍵}
odd4←{(y x)←(⍴⍵)÷¯2 ⋄ x⌽y⊖1 1↓x⌽y⊖⍵}
oddsymmv←oddv symmv
oddsymmh←oddh symmh
oddsymm4←odd4 symm4
symmd←⍉join⊢
dsymm←⊢∨(⌽⊖)
dsymmv←⌽⍪⊖
dsymmh←⊖,⌽
rsymm←{dsymmv(⊢,(⍉⊖))(¯1 1×(⌽⍴⍵)⌈⍴⍵)↑⍵}
stair←{(n y x)←⍺ ⋄ n≤1:⍵ ⋄ ⍵ join y x shift (n-1) y x∇⍵}
fuse←{(n y x)←⍺ ⋄ (head mid tail)←⍵ ⋄ head join (y x+(⍴head) - ⍴mid) shift ⌽⊖(⌽⊖tail) join (y x+(⍴tail) - ⍴mid)shift ⊖⌽n y x stair mid}
agar←{⍉(⌽⍺)⍴⍉⍺[0] (⍴⍵)[1]⍴⍵}⍝ ⍺ — в кількості клітинок

eight←{{(⍉⍵),⍉⌽⍵}(⍵ ⍵⍴1),⍵ ⍵⍴0}
mkship←{⊃(3⍴1)(1 0 0 1),(⍵⍴1),⊂(0 1)}⍝ 2≤⍵≤4
pyramid←{oddsymmv⊃1⍴⍨¨1+⍳⍵}
triangle←{⊃1⍴⍨¨1+⍳⍵}
diag←{⍵ ⍵⍴1,⍵⍴0}

⍝ допоміжні прийоми:
⍝{(2 1÷⍨⍴⍵)↑⍵}¨(H W⍴N+⍳99) play SYMMETRIC ⍝ обрізка симетричного об'єкта (де нижня частина є відображенням верхньої)
⍝ ioclip -o utf-8|sed "s/^\|$/'/g ; s/$/ /"|tr -d \n\r|ioclip -i utf-8  &rem конвертувати знімок виводу в масив рядків
halfv←{(⌈2 1÷⍨⍴⍵)↑⍵}¨

⍝ Брайль для відображення великих мап
	⍝ підгнати розмір до кратного сітці брайлеформ
	⍝ розбити на підмасиви 4х2
	⍝ кожен підмасив вирівняти в лінію й переставити цифри для відповідності з кодами символів
	⍝	1 4	(де 1 — молодший біт, 8 — старший біт)
	⍝	2 5
	⍝	3 6
	⍝	7 8
	⍝ перекодувати підмасиви в числа, далі {⎕ucs 0x2800+⍵}:
braille←{{⎕ucs 10240+(8⍴2)⊥(,⍵)[7 6 5 3 1 4 2 0]}¨{⊂[1 3](4÷⍨0⌷⍴⍵) 4 (2÷⍨1⌷⍴⍵) 2⍴⍵}⍵↑⍨4 2×⌈4 2÷⍨⍴⍵}
⍝ TODO: turn45deg (45° поворот для карт, де всі події відбуваються на діагональній лінії)......
⍝ TODO: косий зріз (для більш компактного відображення серії ходів в аналогічному випадку — кращий варіант).....

⍝ TODO: brief - ф-я для скороченого відображення завеликих фігур.....
gliderL←⊃1(1 0 1)(1 1)
gliderY←⊃(1 0 1)(1 1)(0 1)
⍝ kickgliders - виявити й стерти втікаючі глайдери, додавши інформацію про їх кількість (і напрям)....
	⍝ gliderL ⍷ map - пошук матриці в матриці (повторити для всіх глайдерів і всіх розворотів)....
	⍝(,glider⍷map)/,⍳⍴map ⍝ - результат пошуку в вигляді списку вкладених пар координат
	⍝ відкинути ті з них, які ні з чим не можуть перетнутися (проблема швидших об’єктів — ?).....
	⍝ оформити результат.....
⍝ відображення половини або чверті для симетричних фігур (з інформацією про тип симетрії, парність/непарність)....
	⍝ позначення країв у залежності від типу зрізу:
	⍝ ...↑ oddsymmh
	⍝ ...↑
	⍝ ...↑
	⍝ ←←←  oddsymmv

	⍝ ...|↑
	⍝ ...|↑ symmh
	⍝ ...|↑
	⍝ ---+ 
	⍝ ←←←  symmv

	⍝ ...*
	⍝ ...*
	⍝ ...*
	⍝ **** odd4 rsymmv (якщо з обрамленням лінією — без odd4)

	⍝ ...% oddh dsymmh
	⍝ ...%
	⍝ ...%
	⍝ %%%  oddv dsymmv
⍝ Або так:	
	⍝ ...║
	⍝ ...⌽
	⍝ ...║ (горизонтальна/вертикальна симетрія)
	⍝ ═⊖═╝	
	
	⍝ ...│
	⍝ ...⌽ (те ж саме з непарною віссю)
	⍝ ...│
	⍝ ─⊖─┘
	
	⍝ ...║
	⍝ ...* (радіальна симетрія)
	⍝ ...║
	⍝ ═*═* 	
	
	⍝ ...║
	⍝ ...⍉ (точкова симетрія)
	⍝ ...║
	⍝ ─⍉──
⍝ стирати великі пустоти, наповнюючи їх лініями ↔ чи ↕ з указаним розміром проміжку......

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
⍝ Деякі красиві форми — див. lifeforms.apl; тут же будуть лише конструктори й важливі будівельні елементи 
gun←⊃(0 0 0 0 1 1)(0 0 0 0 1 1)0 0 0 0 0 0 0 0(0 0 0 1 1 1)(0 0 1 0 0 0 1)(0 1 0 0 0 0 0 1)(0 1 0 0 0 0 0 1)(0 0 0 0 1)(0 0 1 0 0 0 1)(0 0 0 1 1 1)(0 0 0 0 1) 0 0 (0 0 0 0 0 1 1 1)(0 0 0 0 0 1 1 1)(0 0 0 0 1 0 0 0 1)0(0 0 0 1 1 0 0 0 1 1)0 0 0 0 0 0 0 0 0(0 0 0 0 0 0 1 1)(0 0 0 0 0 0 1 1)

prepulsar←⊃9⍴6↑3⍴(1 1 1)(1 0 1)
prepulsar1←⊃0(11⍴6↑5⍴1)

clock←⊃(0 0 1)(1 1)(0 0 1 1)(0 1)
biclock←clock join (-3 3+⍴clock)↑clock

queenbee←⊃(1 1 0 0 0 1 1)(0 0 1 1 1)(0 1 0 0 0 1)(0 0 1 0 1)(0 0 0 1)
corder←⊖⍉6 4 bitmap 0x2509 0xC800 ⍝ corder engine, switch engine
